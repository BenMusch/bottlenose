<div class="row">
  <div class="col-sm-12">
    <div id="questions-schema" class="well-sm collapse">
      <h5>YAML Question schema:</h5>
      <ul>
        <li>A question file contains a list of sections.</li>
        <li>A section has a name and a list of questions.</li>
        <li>A question has a <code>type</code> that is one of <code>YesNo</code>,
          <code>TrueFalse</code>, <code>MultipleChoice</code>,
          <code>Numeric</code>,
          or <code>Text</code>.  Every question has
          a <code>weight</code>, a <code>correctAnswer</code>,
          a <code>rubric</code> and a <code>prompt</code>.  A
          question may also contain <code>parts</code>.
          <ul>
            <li><code>Numeric</code> questions also
              contain <code>min</code> and <code>max</code> values.</li>
            <li><code>MultipleChoice</code> questions also
              contain <code>options</code>, which contains a list of strings.
              The special string <code>"other"</code> is used to allow
              for open-ended answers.
              The <code>correctAnswer</code> for a multiple-choice
              question is the 0-based index of the intended answer.</li>
          </ul>
        </li>
        <li>Question rubrics are a list of <code>value: hint</code>
          pairs, suggesting various levels of grading for different
          kinds of mistakes.</li>
        <li>Question parts are optional, derivative parts of the
          question that might elaborate on the answer or help
          scaffold the response.  They may
          be <code>codeTag</code>, <code>codeTags</code>,
          or <code>text</code>.
          <ul>
            <li><code>codeTag</code> suggests students supply a
              single reference to a line of code in their submission</li>
            <li><code>codeTags</code> suggests students supply
              one or more references to lines of code in their
              submission</li>
            <li><code>text</code> requests a free-response answer.</li>
          </ul>
        </li>
      </ul>
      <p>Here is a short example question file:</p>
      <pre>
---
- Design:
  - YesNo:
      weight: 1
      prompt: >-
        Does your code make a distinction between public interfaces and private implementation?
      correctAnswer: Yes
      parts:
        - codeTag: "Tag the line defining the interface"
        - codeTag: "Tag the line implementing that interface."
      rubric:
        - 1: if Yes, and their code is correctly tagged
        - 0.75: if they answered No, but their code is actually correct
        - 0.25: if Yes, but their code is wrong
        - 0.1: if they answered No and their code is wrong
  - Numeric:
      weight: 3
      correctAnswer: 1
      prompt: >-
        On a scale of 0 (worst) to 1 (best), how well do you think your
        model is designed?  This question is where the TAs will assess
        your overall design.
      min: 0
      max: 1
      parts:
        - text: Describe what you might change in the future.
      rubric:
        - 1: flawless
        - 0.8: well-separated concepts, but some oddly-tight coupling between them
        - 0.5: "it works, but it's not well designed"
        - 0.1: "it doesn't appear to work, but something was submitted"
  - MultipleChoice:
      weight: 1
      correctAnswer: 0
      prompt: >-
        Eventually, views will need to process all the data in your
        model.  Some views will care about all the data; others will
        need just some portion of it.  How easy is it to
        retrieve data from your model?
      options:
        - >-
          Easy: there is a single method a client can use to retrieve
          exactly the data it wishes.
        - >-
          Medium: there is a method a client can use to retrieve all
          data, and the client can then select what it needs.
        - "Impossible: clients cannot retrieve the data at all"
        - other
      parts:
        - codeTag: >-
            Tag the first line in the interface that declare the methods that
            accomplish this.
      rubric:
        - 1: if Easy, and it is in fact easy
        - 0.5: if Medium, and it is in fact medium
        - 0: if Impossible, and it is in fact impossible
- Testing:
  - YesNo:
      weight: 1
      correctAnswer: Yes
      prompt: Do you have a test for the empty model?
      parts:
        - codeTag: Tag it.
      rubric:
        - 1: "Yes"
        - 0.5: Maybe -- they might have something that incidentally tests an empty model
        - 0: "No"
      </pre>
    </div>
  </div>
</div>

